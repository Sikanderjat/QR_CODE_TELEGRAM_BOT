import qrcode as qr
from telegram import Update
from telegram.ext import Updater, Application, CommandHandler, MessageHandler, filters, ContextTypes
import logging
from flask import Flask, request
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)
bot_api = "7681906379:AAGsM-gpLxdt0AKUtjXHrcZ6yeJ6fC4rPnc"
webhook_url = ""

def qr_code_generator(text):
    try:
        qr_code = qr.make(text)
        qr_code.save("qrcode.png")
        return "qrcode.png"
    except Exception as e:
        logging.error(f"Error generating QR code: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("Please Send Your Text. It generates QR codes from text.")
    except Exception as e:
        logging.error(f"Error sending start message: {e}")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("This is a simple QR code generator bot Generated by SIKANDER.")
    except Exception as e:
        logging.error(f"Error sending about message: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("Simpley send your text \nBot automaticaly make QR code of given text for you")
    except Exception as e:
        logging.error(f"Error sending help message: {e}")

async def handel_text(update: Update, context=ContextTypes.DEFAULT_TYPE):
    try:
        user_text = update.message.text
        qr_code_file = qr_code_generator(user_text)
        if qr_code_file:
            with open(qr_code_file, "rb") as photo:
                await update.message.reply_photo(photo)
        else:
            await update.message.reply_text("Error generating QR code")
    except Exception as e:
        logging.error(f"Error handling text message: {e}")

@app.route("/webhook", methods=["POST"])
def webhook():
    """Handles webhook updates from Telegram."""
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    telegram_app.update_queue.put(update)
    return "OK", 200


if __name__ == "__main__":
    telegram_app = Application.builder().token(bot_api).build()

    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("help",help_command))
    telegram_app.add_handler(CommandHandler("about",about))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,handel_text))

    print("bot is start")
    telegram_app.run_polling()
